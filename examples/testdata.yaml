# Problem type, allow [default, submit_answer, interactive]
# 问题类型，允许的值有 [default, submit_answer, interactive]
type: default

# 题目模板（通常无需填写该设置项）
# 如果设置此项，则用户程序将被插入在模板中间。
template:
  cc:
    - >-
      #include<iostream>
      using namespace std;
      int main(){
    - >-   
      }
  pas:
    - >-
      var a, b:longint;
      begin
    - >-
      end.

# When Problem type is 'default', The following options are allowed:   -------------+
# 当问题类型为 'default' 时，下面的设置可用:                                         #
# Checker type, allow [default, ccr, cena, hustoj, lemon, qduoj, syzoj, testlib]    #
# 比较器类型，支持的值有 [default, ccr, cena, hustoj, lemon, qduoj, syzoj, testlib]  #
# Attention: When using testlib, DO NOT INCLUDE testlib.h in your file.             #
# 注意：使用Testlib时，不要在文件中包含testlib.h。                                   #
checker_type: default                                                               #
# When CHECKER_TYPE isn't 'default', The following options are allowed:   -----+    #
# 当比较器类型不为 'default' 时，您应该提供自定义比较器文件。                    #    #
# Checker file (path in the zipfile)    文件路径（位于压缩包中的路径）          #   #
checker: chk.cpp                                                               #    #
# Time and memory limit.  时间与内存限制（此处的限制优先级低于测试点的限制）         #
# Can be overwrite by the following option:                                         #
# cases->time cases->memory subtasks->time subtasks->memory                         #
time: 1s                                                                            #
memory: 128m                                                                        #
# Extra files 额外文件                                                               #
# These files will be copied to the working directory 这些文件将被复制到工作目录。   #
user_extra_files:                                                                   #
  - extra_input.txt                                                                 #
judge_extra_files:                                                                  #
  - extra_file.txt                                                                  #

# When Problem type is 'interactive', The following options are allowed:   ---------+
# 当问题类型为 'interactive' 时，下面的设置可用:                                     #
# Interactor file (path in the zipfile)    交互器路径（位于压缩包中的路径）          #
interactor: interactor.cpp                                                             #
# Extra files 额外文件                                                              #
# These files will be copied to the working directory 这些文件将被复制到工作目录。   #
# judge_extra_files will be copy into workdir of both checker and interactor.    #
user_extra_files:                                                                   #
  - extra_input.txt                                                                 #
judge_extra_files:                                                                  #
  - extra_file.txt                                                                  #

# Test Cases 测试数据列表
# If neither CASES or SUBTASKS are set(or config.yaml doesn't exist), judge will try to locate them automaticly.
# 如果 CASES 和 SUBTASKS 都没有设置或 config.yaml 不存在， 系统会自动尝试识别数据点。
# We support these names for auto mode: 自动识别支持以下命名方式：
# 1. [name(optional)][number].(in/out/ans)         RegExp: /^([a-zA-Z]*)([0-9]+).in$/
#   examples: 
#     - c1.in / c1.out
#     - 1.in / 1.out
#     - c1.in / c1.ans
# 2. input[number].txt / output[number].txt        RegExp: /^(input)([0-9]+).txt$/
#   - example: input1.txt / input2.txt
#
# The CASES option has higher priority than the SUBTASKS option!
# 在有 CASES 设置项时，不会读取 SUBTASKS 设置项！
score: 50     # 单个测试点分数
time: 1s      # 时间限制
memory: 256m  # 内存限制
cases:
  - input: abc.in
    output: def.out
  - input: ghi.in
    output: jkl.out

# 使用Subtask项：

subtasks:
  - score: 30
    time: 1s
    memory: 64m
    cases:
      - input: a.in
        output: a.out
      - input: b.in
        output: b.out
  - score: 70
    time: 0.5s
    memory: 32m
    cases:
      - input: c.in
        output: c.out
      - input: d.in
        output: d.out
